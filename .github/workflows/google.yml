# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "master" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches:
      - "master"

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-west1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: smartleep-cluster    # TODO: update to cluster name
  GKE_ZONE: us-west1-a   # TODO: update to cluster zone
  DEPLOYMENT_NAME: test-kluster # TODO: update to deployment name
  REPOSITORY: smartleep-repo # TODO: update smartleep- to Artifact Registry docker repository
  IMAGE: test-node

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v0'
      with:
        service_account_key: ${{ secrets.GKE_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}
      
    - name: 'Install GKE Auth'
      run: |-
        gcloud components install gke-gcloud-auth-plugin

    - name: Get GKE Credentials
      run: |-
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone=${{ env.GKE_ZONE }} --project=${{ env.PROJECT_ID }}
    
    - name: Docker configuration
      run: |-
        gcloud auth configure-docker ${{ env.GAR_LOCATION}}-docker.pkg.dev

    # Build the Docker image
    - name: Build
      run: |-
        docker build -t "$IMAGE" .
        docker tag "$IMAGE" "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:lastest"
        
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:lastest"
    
    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
    
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        ./kustomize edit set image us-west1-docker.pkg.dev/smartleep-app/smartleep-repo/$IMAGE:lastest
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
        
#         kustomize build . | kubectl apply -f -
#         kubectl patch deployment $DEPLOYMENT_NAME -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
#         kubectl rollout status deployment/$DEPLOYMENT_NAME
#         kubectl get services -o wide
        # replacing the image name in the k8s template
        
